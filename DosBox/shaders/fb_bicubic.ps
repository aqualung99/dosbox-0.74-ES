#version 100

precision mediump float;

uniform mediump sampler2D texUnit;
varying mediump vec2 texcoord;
uniform mediump vec4 sourceSize;
uniform mediump vec2 one;
uniform mediump vec2 texcoordScale;

void main()
{
	vec2 pixelCoords = texcoord * sourceSize.xy;
	vec2 tc = floor(pixelCoords - vec2(0.5)) + vec2(0.5);

	vec2 f = pixelCoords - tc;
	vec2 f2 = f * f;
	vec2 f3 = f2 * f;

	vec2 omf = vec2(1.0) - f;
	vec2 omfSquared = omf * omf;
	vec2 omfCubed = omfSquared * omf;

	vec2 w0 = vec2(1.0 / 6.0) * omfCubed;
	vec2 w1 = vec2(1.0 / 6.0) * (vec2(4.0) + (vec2(3.0) * f3) - (vec2(6.0) * f2));
	vec2 w2 = vec2(1.0 / 6.0) * (vec2(4.0) + (vec2(3.0) * omfCubed) - (vec2(6.0) * omfSquared));
	vec2 w3 = vec2(1.0 / 6.0) * f3;

	//
	// Catmull-Rom spline weights (requires 9-tap)
	//
/*
	vec2 w0 = f2 - vec2(0.5) * (f3 + f);
    vec2 w1 = vec2(1.5) * f3 - vec2(2.5) * f2 + vec2(1.0);
    vec2 w2 = vec2(-1.5) * f3 + vec2(2.0) * f2 + vec2(0.5) * f;
    vec2 w3 = vec2(0.5) * (f3 - f2);
*/
	vec2 s0 = w0 + w1;
    vec2 s1 = w2 + w3;
 
    vec2 f0 = w1 / (w0 + w1);
    vec2 f1 = w3 / (w2 + w3);
 
    vec2 t0 = (tc - vec2(1.0) + f0) * one;
    vec2 t1 = (tc + vec2(1.0) + f1) * one;
 
	gl_FragColor = texture2D(texUnit, vec2(t0.x, t0.y)) * vec4(s0.x * s0.y)
				 + texture2D(texUnit, vec2(t1.x, t0.y)) * vec4(s1.x * s0.y)
				 + texture2D(texUnit, vec2(t0.x, t1.y)) * vec4(s0.x * s1.y)
				 + texture2D(texUnit, vec2(t1.x, t1.y)) * vec4(s1.x * s1.y);

/*				 
	lowp vec4 col = texture2D(texUnit, texcoord);
	gl_FragColor.xyz = col.xyz;
	gl_FragColor.w = 1.0;
*/
}
