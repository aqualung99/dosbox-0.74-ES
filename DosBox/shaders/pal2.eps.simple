#version 100

precision mediump float;
precision mediump int;

uniform sampler2D texUnit;
uniform vec4 sourceSize;
uniform sampler2D palUnit;
uniform vec2 one;
uniform vec2 uvRatio;

varying vec2 tcNorm;
// varying vec2 texcoord;

// Enable screen curvature.
#define CURVATURE
#define USEGAUSSIAN

// Controls the intensity of the barrel distortion used to emulate the
// curvature of a CRT. 0.0 is perfectly flat, 1.0 is annoyingly
// distorted, higher values are increasingly ridiculous.
#define distortion 0.05

// Simulate a CRT gamma of 2.4.
#define inputGamma  2.4

// Compensate for the standard sRGB gamma of 2.2.
#define outputGamma 2.2

// Macros.
//
//
//	vec2 xy = vec2(xyTemp.x * uvRatio.x, (1.0 - uvRatio.y) + (xyTemp.y * uvRatio.y));
//
//
//

#define PAL(p)	 			texture2D(palUnit, vec2((p),0))
#define LOOKUP(c)			PAL(texture2D(texUnit, (c) * uvRatio).x)

// By applying the CRT gamma here, we make it so the colors
// we are working with are the values that a CRT would *apparently* have
// on the screen. We are baking-in the wierd gamma response of the CRT monitor.
//
#define TEX2D(c) 		pow(LOOKUP(c), vec4(inputGamma))


// Apply radial distortion to the given coordinate.
vec2 radialDistortion(vec2 coord)
{
	vec2 cc = coord - 0.5;
	float dist = dot(cc, cc) * distortion;
	return (coord + cc * (1.0 + dist) * dist);
}

// Calculate the influence of a scanline on the current pixel.
//
// 'distance' is the distance in texture coordinates from the current
// pixel to the scanline in question.
// 'color' is the colour of the scanline at the horizontal location of
// the current pixel.
vec4 scanlineWeights(float distance, vec4 color)
{
#ifdef USEGAUSSIAN
  vec4 wid = 0.3 + 0.1 * pow(color, vec4(3.0));
  vec4 weights = vec4(distance / wid);
  return 0.4 * exp(-weights * weights) / wid;
#else

	// The "width" of the scanline beam is set as 2*(1 + x^4) for
	// each RGB channel.
	vec4 wid = 2.0 + 2.0 * pow(color, vec4(4.0));

	// The "weights" lines basically specify the formula that gives
	// you the profile of the beam, i.e. the intensity as
	// a function of distance from the vertical center of the
	// scanline. In this case, it is gaussian if width=2, and
	// becomes nongaussian for larger widths. Ideally this should
	// be normalized so that the integral across the beam is
	// independent of its width. That is, for a narrower beam
	// "weights" should have a higher peak at the center of the
	// scanline than for a wider beam.
	vec4 weights = vec4(distance / 0.3);
	return 1.4 * exp(-pow(weights * inversesqrt(0.5 * wid), wid)) / (0.6 + 0.2 * wid);
#endif
}

void main() {
	gl_FragColor = LOOKUP(tcNorm);
}
