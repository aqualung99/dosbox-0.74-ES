#version 100

precision mediump float;
precision lowp int;

uniform sampler2D texUnit;
uniform vec4 sourceSize;
uniform lowp sampler2D palUnit;
uniform vec2 one;
uniform vec2 uvRatio;

varying vec2 tcNorm;

// Enable screen curvature.
#define CURVATURE
// #define USEGAUSSIAN
#define USE_INPUT_GAMMA
#define USE_OUTPUT_GAMMA

// Controls the intensity of the barrel distortion used to emulate the
// curvature of a CRT. 0.0 is perfectly flat, 1.0 is annoyingly
// distorted, higher values are increasingly ridiculous.
#define distortion 0.05

// Simulate a CRT gamma of 2.4.
#define inputGamma  2.4

// Compensate for the standard sRGB gamma of 2.2.
#define outputGamma 2.2

// Macros.
//
//
//	vec2 xy = vec2(xyTemp.x * uvRatio.x, (1.0 - uvRatio.y) + (xyTemp.y * uvRatio.y));
//
//
//

#define PAL(p)	 			texture2D(palUnit, vec2((p),0))
#define LOOKUP(c)			PAL(texture2D(texUnit, (c) * uvRatio).x)

// By applying the CRT gamma here, we make it so the colors
// we are working with are the values that a CRT would *apparently* have
// on the screen. We are baking-in the wierd gamma response of the CRT monitor.
//
#ifdef USE_INPUT_GAMMA
#define TEX2D(c) 		pow(LOOKUP(c), vec4(inputGamma))
#else
#define TEX2D(c)		LOOKUP((c))
#endif


// Apply radial distortion to the given coordinate.
vec2 radialDistortion(vec2 coord)
{
	vec2 cc = coord - 0.5;
	float dist = dot(cc, cc) * distortion;
	return (coord + cc * (1.0 + dist) * dist);
}

// Calculate the influence of a scanline on the current pixel.
//
// 'distance' is the distance in texture coordinates from the current
// pixel to the scanline in question.
// 'color' is the colour of the scanline at the horizontal location of
// the current pixel.
vec4 scanlineWeights(float distance, vec4 color)
{
#ifdef USEGAUSSIAN
  vec4 wid = 0.3 + 0.1 * pow(color, vec4(3.0));
  vec4 weights = vec4(distance / wid);
  return 0.4 * exp(-weights * weights) / wid;
#else

	// The "width" of the scanline beam is set as 2*(1 + x^4) for
	// each RGB channel.
	vec4 wid = 2.0 + 2.0 * pow(color, vec4(4.0));

	// The "weights" lines basically specify the formula that gives
	// you the profile of the beam, i.e. the intensity as
	// a function of distance from the vertical center of the
	// scanline. In this case, it is gaussian if width=2, and
	// becomes nongaussian for larger widths. Ideally this should
	// be normalized so that the integral across the beam is
	// independent of its width. That is, for a narrower beam
	// "weights" should have a higher peak at the center of the
	// scanline than for a wider beam.
	vec4 weights = vec4(distance / 0.3);
	return 1.4 * exp(-pow(weights * inversesqrt(0.5 * wid), wid)) / (0.6 + 0.2 * wid);
#endif
}

void main() {
	 // Here's a helpful diagram to keep in mind while trying to
	// understand the code:
	//
	//  |      |      |      |      |
	// -------------------------------
	//  |      |      |      |      |
	//  |  01  |  11  |  21  |  31  | <-- current scanline
	//  |      | @    |      |      |
	// -------------------------------
	//  |      |      |      |      |
	//  |  02  |  12  |  22  |  32  | <-- next scanline
	//  |      |      |      |      |
	// -------------------------------
	//  |      |      |      |      |
	//
	// Each character-cell represents a pixel on the output
	// surface, "@" represents the current pixel (always somewhere
	// in the bottom half of the current scan-line, or the top-half
	// of the next scanline). The grid of lines represents the
	// edges of the texels of the underlying texture.

	// Texture coordinates of the texel containing the active pixel.
#ifdef CURVATURE
	vec2 xy = radialDistortion(tcNorm);
#else
	vec2 xy = tcNorm;
#endif

	// Of all the pixels that are mapped onto the texel we are
	// currently rendering, which pixel are we currently rendering?
	vec2 ratio_scale = xy * sourceSize.xy - vec2(0.5);
	vec2 uv_ratio = fract(ratio_scale);

	// Snap to the center of the underlying texel.
	xy.y = (floor(ratio_scale.y) + 0.5) / sourceSize.y;

	// Calculate the effective colour of the current and next
	// scanlines at the horizontal location of the current pixel.
	vec4 col  = TEX2D(xy);
	vec4 col2 = TEX2D(xy + vec2(0.0, one.y));

	// Calculate the influence of the current and next scanlines on
	// the current pixel.
	vec4 weights  = scanlineWeights(uv_ratio.y, col);
	vec4 weights2 = scanlineWeights(1.0 - uv_ratio.y, col2);
	vec3 mul_res  = (col * weights + col2 * weights2).rgb;

	// dot-mask emulation:
	// Output pixels are alternately tinted green and magenta.
	//
	vec3 dotMaskWeights = mix(
			vec3(1.0125, 0.9875, 1.0125),
			vec3(0.9875, 1.0125, 0.9875),
			floor(mod(ratio_scale.x, 2.0))
		);

	mul_res *= dotMaskWeights;

	// We desire the final output to be linear, because we already compensated for
	// expected CRT gamma response. Therefore, we have to now compensate for the
	// gamma response of the LCD monitor the user is actually using (LCD monitors
	// emulate the old gamma response of CRT monitors; so apply the inverse of that
	// response to get a final linear result.)
	//
#ifdef USE_OUTPUT_GAMMA
	gl_FragColor = vec4(pow(mul_res, vec3(1.0 / outputGamma)), 1.0);
#else
	gl_FragColor = vec4(mul_res, 1.0);
#endif
}
